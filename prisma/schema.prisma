// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model beeusers {
  id                Int      @id @default(autoincrement()) @map("id")
  firstname         String   @map("firstname")
  lastname          String   @map("lastname")
  email             String   @unique @map("email")
  phonenumber       String?  @unique @map("phonenumber")
  password          String   @map("password")
  createdAt         DateTime @default(now()) @map("created_at")
  confirmationToken String?  @map("confirmation_token")
  isConfirmed       Boolean  @default(false) @map("is_confirmed")
  passportId        String?  @map("passport_id")
  passportFile      String?  @map("passport_file")
  phoneConfirmed    String?  @map("phone_confirmed")
  isProfileComplete Boolean  @default(false)

  batches           Batch[]
  tokenStats        TokenStats?

  @@map("beeusers")
}

model Batch {
  id                        String   @id @default(uuid())
  batchNumber               String   @unique
  batchName                 String
  status                    String   @default("Pending")
  containerType             String   @default("Glass")
  labelType                 String   @default("Standard")
  weightKg                  Float    @default(0)
  jarsUsed                  Int      @default(0)
  originOnly                Float    @default(0)
  qualityOnly               Float    @default(0)
  bothCertifications        Float    @default(0)
  uncertified               Float    @default(0)
  originOnlyPercent         Int      @default(0)
  qualityOnlyPercent        Int      @default(0)
  bothCertificationsPercent Int      @default(0)
  uncertifiedPercent        Int      @default(0)
  completedChecks           Int      @default(0)
  totalChecks               Int      @default(4)
  certificationDate         String?
  expiryDate                String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  userId                    Int

  user                      beeusers @relation(fields: [userId], references: [id])
  apiaries                  Apiary[]
}

model TokenStats {
  id                 String   @id @default(uuid())
  userId             Int      @unique
  totalTokens        Int      @default(0)
  remainingTokens    Int      @default(0)
  originOnly         Float    @default(0)
  qualityOnly        Float    @default(0)
  bothCertifications Float    @default(0)

  beeusers           beeusers @relation(fields: [userId], references: [id])
}

model Apiary {
  id         Int     @id @default(autoincrement())
  name       String
  number     String
  hiveCount  Int
  latitude   Float
  longitude  Float
  kilosCollected  Float  @default(0)

  batchId    String
  batch      Batch   @relation(fields: [batchId], references: [id])
}

